import * as Location from 'expo-location';
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert, Linking } from 'react-native';

// Emergency services integration for women's safety
export const EMERGENCY_SERVICES = {
  WOMEN_HELPLINE: {
    number: '1091',
    name: '‡§Æ‡§π‡§ø‡§≤‡§æ ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®',
    description: '24x7 ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®',
    type: 'women_safety',
  },
  POLICE: {
    number: '100',
    name: '‡§™‡•Å‡§≤‡§ø‡§∏',
    description: '‡§§‡•Å‡§∞‡§Ç‡§§ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
    type: 'emergency',
  },
  AMBULANCE: {
    number: '108',
    name: '‡§è‡§Æ‡•ç‡§¨‡•Å‡§≤‡•á‡§Ç‡§∏',
    description: '‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä',
    type: 'medical',
  },
  FIRE: {
    number: '101',
    name: '‡§´‡§æ‡§Ø‡§∞ ‡§¨‡•ç‡§∞‡§ø‡§ó‡•á‡§°',
    description: '‡§Ü‡§ó ‡§î‡§∞ ‡§¨‡§ö‡§æ‡§µ ‡§∏‡•á‡§µ‡§æ',
    type: 'fire',
  },
  CHILD_HELPLINE: {
    number: '1098',
    name: '‡§ö‡§æ‡§á‡§≤‡•ç‡§° ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®',
    description: '‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®',
    type: 'child_safety',
  },
  DOMESTIC_VIOLENCE: {
    number: '181',
    name: '‡§ò‡§∞‡•á‡§≤‡•Ç ‡§π‡§ø‡§Ç‡§∏‡§æ ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®',
    description: '‡§ò‡§∞‡•á‡§≤‡•Ç ‡§π‡§ø‡§Ç‡§∏‡§æ ‡§ï‡•á ‡§ñ‡§ø‡§≤‡§æ‡§´ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
    type: 'domestic_violence',
  },
};

// State-wise emergency numbers (sample for major states)
export const STATE_EMERGENCY_NUMBERS = {
  'Delhi': {
    women_helpline: '181',
    police_control_room: '011-23490000',
    women_safety_app: 'Himmat Plus',
  },
  'Maharashtra': {
    women_helpline: '103',
    police_control_room: '022-22621855',
    women_safety_app: 'Maha Police',
  },
  'Karnataka': {
    women_helpline: '1091',
    police_control_room: '080-22942444',
    women_safety_app: 'Suraksha',
  },
  'Tamil Nadu': {
    women_helpline: '044-28447777',
    police_control_room: '044-23452001',
    women_safety_app: 'Kavalan SOS',
  },
  'West Bengal': {
    women_helpline: '033-24799633',
    police_control_room: '033-22143526',
    women_safety_app: 'WB Police',
  },
  'Uttar Pradesh': {
    women_helpline: '1090',
    police_control_room: '0522-2238902',
    women_safety_app: 'UP Police Citizen',
  },
};

// Government schemes and helplines
export const GOVERNMENT_SCHEMES = {
  UJJWALA: {
    name: '‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§â‡§ú‡•ç‡§ú‡•ç‡§µ‡§≤‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ',
    helpline: '1906',
    description: '‡§Æ‡•Å‡§´‡•ç‡§§ ‡§ó‡•à‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ',
    eligibility: 'BPL ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•Ä ‡§Æ‡§π‡§ø‡§≤‡§æ‡§è‡§Ç',
    documents: ['‡§∞‡§æ‡§∂‡§® ‡§ï‡§æ‡§∞‡•ç‡§°', '‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°', '‡§¨‡•à‡§Ç‡§ï ‡§™‡§æ‡§∏‡§¨‡•Å‡§ï'],
  },
  JAN_DHAN: {
    name: '‡§ú‡§® ‡§ß‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ',
    helpline: '1800-11-0001',
    description: '‡§Æ‡•Å‡§´‡•ç‡§§ ‡§¨‡•à‡§Ç‡§ï ‡§ñ‡§æ‡§§‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ',
    eligibility: '‡§∏‡§≠‡•Ä ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï',
    documents: ['‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°', '‡§™‡§π‡§ö‡§æ‡§® ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£'],
  },
  AYUSHMAN_BHARAT: {
    name: '‡§Ü‡§Ø‡•Å‡§∑‡•ç‡§Æ‡§æ‡§® ‡§≠‡§æ‡§∞‡§§',
    helpline: '14555',
    description: '5 ‡§≤‡§æ‡§ñ ‡§§‡§ï ‡§ï‡§æ ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§á‡§≤‡§æ‡§ú',
    eligibility: '‡§ó‡§∞‡•Ä‡§¨ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞',
    documents: ['‡§∞‡§æ‡§∂‡§® ‡§ï‡§æ‡§∞‡•ç‡§°', '‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°'],
  },
  SUKANYA_SAMRIDDHI: {
    name: '‡§∏‡•Å‡§ï‡§®‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ',
    helpline: '1800-266-6868',
    description: '‡§¨‡•á‡§ü‡•Ä ‡§ï‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§∂‡§æ‡§¶‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ö‡§§',
    eligibility: '10 ‡§∏‡§æ‡§≤ ‡§§‡§ï ‡§ï‡•Ä ‡§¨‡•á‡§ü‡•Ä',
    documents: ['‡§¨‡•á‡§ü‡•Ä ‡§ï‡§æ ‡§ú‡§®‡•ç‡§Æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§™‡§§‡•ç‡§∞', '‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§Ü‡§ß‡§æ‡§∞'],
  },
};

// Emergency contact management
export async function saveEmergencyContacts(contacts) {
  try {
    await AsyncStorage.setItem('emergency_contacts', JSON.stringify(contacts));
    return { success: true };
  } catch (error) {
    console.error('Error saving emergency contacts:', error);
    return { success: false, error: error.message };
  }
}

export async function getEmergencyContacts() {
  try {
    const contacts = await AsyncStorage.getItem('emergency_contacts');
    return contacts ? JSON.parse(contacts) : [];
  } catch (error) {
    console.error('Error getting emergency contacts:', error);
    return [];
  }
}

// Quick emergency call
export async function makeEmergencyCall(serviceType) {
  try {
    const service = EMERGENCY_SERVICES[serviceType];
    if (!service) {
      throw new Error('Emergency service not found');
    }

    const phoneNumber = `tel:${service.number}`;
    const canCall = await Linking.canOpenURL(phoneNumber);
    
    if (canCall) {
      Alert.alert(
        '‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§ï‡•â‡§≤',
        `${service.name} (${service.number}) ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?`,
        [
          { text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç', style: 'cancel' },
          { 
            text: '‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç', 
            onPress: () => Linking.openURL(phoneNumber),
            style: 'destructive'
          }
        ]
      );
      
      // Track emergency call for analytics
      await trackEmergencyAction('call_initiated', {
        service: serviceType,
        timestamp: Date.now(),
      });
      
      return { success: true };
    } else {
      throw new Error('Cannot make phone calls on this device');
    }
  } catch (error) {
    console.error('Error making emergency call:', error);
    return { success: false, error: error.message };
  }
}

// Send emergency SMS with location
export async function sendEmergencySMS(contacts, message) {
  try {
    const location = await getCurrentLocation();
    const locationText = location 
      ? `‡§Æ‡•á‡§∞‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§®: https://maps.google.com/?q=${location.latitude},${location.longitude}`
      : '‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à';
    
    const fullMessage = `${message}\n\n${locationText}\n\nDididial ‡§ê‡§™ ‡§∏‡•á ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ`;
    
    for (const contact of contacts) {
      const smsUrl = `sms:${contact.phone}?body=${encodeURIComponent(fullMessage)}`;
      const canSendSMS = await Linking.canOpenURL(smsUrl);
      
      if (canSendSMS) {
        await Linking.openURL(smsUrl);
      }
    }
    
    await trackEmergencyAction('sms_sent', {
      contactCount: contacts.length,
      hasLocation: !!location,
      timestamp: Date.now(),
    });
    
    return { success: true, message: '‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä SMS ‡§≠‡•á‡§ú‡•á ‡§ó‡§è' };
  } catch (error) {
    console.error('Error sending emergency SMS:', error);
    return { success: false, error: error.message };
  }
}

// Get current location for emergency
async function getCurrentLocation() {
  try {
    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      return null;
    }

    const location = await Location.getCurrentPositionAsync({
      accuracy: Location.Accuracy.High,
      timeout: 10000,
    });

    return {
      latitude: location.coords.latitude,
      longitude: location.coords.longitude,
    };
  } catch (error) {
    console.error('Error getting location:', error);
    return null;
  }
}

// Setup emergency notifications
export async function setupEmergencyNotifications() {
  try {
    const { status } = await Notifications.requestPermissionsAsync();
    if (status !== 'granted') {
      return { success: false, error: 'Notification permission not granted' };
    }

    // Schedule daily safety reminder
    await Notifications.scheduleNotificationAsync({
      content: {
        title: '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∞‡§ø‡§Æ‡§æ‡§á‡§Ç‡§°‡§∞ üõ°Ô∏è',
        body: '‡§Ö‡§™‡§®‡•á ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§ï‡•â‡§®‡•ç‡§ü‡•à‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§π‡•á‡§Ç‡•§',
        data: { type: 'safety_reminder' },
      },
      trigger: {
        hour: 20, // 8 PM
        minute: 0,
        repeats: true,
      },
    });

    return { success: true };
  } catch (error) {
    console.error('Error setting up emergency notifications:', error);
    return { success: false, error: error.message };
  }
}

// Get location-based emergency services
export async function getLocationBasedServices() {
  try {
    const location = await getCurrentLocation();
    if (!location) {
      return { success: false, error: 'Location not available' };
    }

    // Mock implementation - in real app, use reverse geocoding API
    const mockState = 'Delhi'; // This would be determined from coordinates
    const stateServices = STATE_EMERGENCY_NUMBERS[mockState] || {};
    
    return {
      success: true,
      services: {
        ...EMERGENCY_SERVICES,
        state_specific: stateServices,
      },
      location: {
        state: mockState,
        coordinates: location,
      },
    };
  } catch (error) {
    console.error('Error getting location-based services:', error);
    return { success: false, error: error.message };
  }
}

// Emergency panic button
export async function triggerPanicMode() {
  try {
    const contacts = await getEmergencyContacts();
    
    if (contacts.length === 0) {
      Alert.alert(
        '‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§ï‡•â‡§®‡•ç‡§ü‡•à‡§ï‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á',
        '‡§™‡§π‡§≤‡•á ‡§Ö‡§™‡§®‡•á ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§ï‡•â‡§®‡•ç‡§ü‡•à‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç‡•§',
        [{ text: '‡§†‡•Ä‡§ï ‡§π‡•à' }]
      );
      return { success: false, error: 'No emergency contacts found' };
    }

    // Send emergency SMS to all contacts
    const smsResult = await sendEmergencySMS(
      contacts,
      'üö® ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä! ‡§Æ‡•Å‡§ù‡•á ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§'
    );

    // Show emergency services options
    Alert.alert(
      'üö® ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§Æ‡•ã‡§° ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø',
      '‡§Ü‡§™‡§ï‡•á ‡§ï‡•â‡§®‡•ç‡§ü‡•à‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§¨ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?',
      [
        { text: '‡§™‡•Å‡§≤‡§ø‡§∏ ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç', onPress: () => makeEmergencyCall('POLICE') },
        { text: '‡§Æ‡§π‡§ø‡§≤‡§æ ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®', onPress: () => makeEmergencyCall('WOMEN_HELPLINE') },
        { text: '‡§è‡§Æ‡•ç‡§¨‡•Å‡§≤‡•á‡§Ç‡§∏', onPress: () => makeEmergencyCall('AMBULANCE') },
        { text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç', style: 'cancel' },
      ]
    );

    await trackEmergencyAction('panic_mode_activated', {
      timestamp: Date.now(),
      contactsNotified: contacts.length,
    });

    return { success: true };
  } catch (error) {
    console.error('Error triggering panic mode:', error);
    return { success: false, error: error.message };
  }
}

// Get government scheme information
export function getGovernmentSchemeInfo(schemeName) {
  const scheme = GOVERNMENT_SCHEMES[schemeName];
  if (!scheme) {
    return { success: false, error: 'Scheme not found' };
  }

  return {
    success: true,
    scheme: {
      ...scheme,
      howToApply: getApplicationProcess(schemeName),
      nearbyOffices: getNearbyGovernmentOffices(schemeName),
    },
  };
}

// Mock application process
function getApplicationProcess(schemeName) {
  const processes = {
    UJJWALA: [
      '‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§ó‡•à‡§∏ ‡§è‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç',
      '‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú ‡§≤‡•á ‡§ú‡§æ‡§è‡§Ç',
      '‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç',
      '15 ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ',
    ],
    JAN_DHAN: [
      '‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§¨‡•à‡§Ç‡§ï ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç',
      '‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§° ‡§≤‡•á ‡§ú‡§æ‡§è‡§Ç',
      '‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡•á‡§Ç',
      '‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ñ‡§æ‡§§‡§æ ‡§ñ‡•Å‡§≤ ‡§ú‡§æ‡§è‡§ó‡§æ',
    ],
    AYUSHMAN_BHARAT: [
      '‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä CSC ‡§∏‡•á‡§Ç‡§ü‡§∞ ‡§ú‡§æ‡§è‡§Ç',
      '‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ö‡•á‡§ï ‡§ï‡§∞‡§æ‡§è‡§Ç',
      '‡§ó‡•ã‡§≤‡•ç‡§°‡§® ‡§ï‡§æ‡§∞‡•ç‡§° ‡§¨‡§®‡§µ‡§æ‡§è‡§Ç',
      '‡§π‡•â‡§∏‡•ç‡§™‡§ø‡§ü‡§≤ ‡§Æ‡•á‡§Ç ‡§á‡§≤‡§æ‡§ú ‡§ï‡§∞‡§æ‡§è‡§Ç',
    ],
  };

  return processes[schemeName] || ['‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à'];
}

// Mock nearby offices
function getNearbyGovernmentOffices(schemeName) {
  // In real implementation, use location and government APIs
  return [
    {
      name: '‡§ú‡§ø‡§≤‡§æ ‡§ï‡§≤‡•á‡§ï‡•ç‡§ü‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø',
      address: '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§æ‡§ú‡§æ‡§∞, ‡§∂‡§π‡§∞',
      phone: '0XXX-XXXXXXX',
      distance: '2 ‡§ï‡§ø‡§Æ‡•Ä',
    },
    {
      name: '‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø',
      address: '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ï‡•á ‡§™‡§æ‡§∏',
      phone: '0XXX-XXXXXXX',
      distance: '5 ‡§ï‡§ø‡§Æ‡•Ä',
    },
  ];
}

// Track emergency actions for analytics
async function trackEmergencyAction(action, data) {
  try {
    const emergencyLog = {
      action,
      data,
      timestamp: Date.now(),
    };

    const existingLogs = await AsyncStorage.getItem('emergency_logs');
    const logs = existingLogs ? JSON.parse(existingLogs) : [];
    
    logs.push(emergencyLog);
    
    // Keep only last 100 emergency logs
    if (logs.length > 100) {
      logs.splice(0, logs.length - 100);
    }

    await AsyncStorage.setItem('emergency_logs', JSON.stringify(logs));
  } catch (error) {
    console.error('Error tracking emergency action:', error);
  }
}

// Safety tips based on current time and location
export function getSafetyTips() {
  const hour = new Date().getHours();
  const tips = [];

  if (hour >= 20 || hour <= 6) {
    tips.push({
      title: '‡§∞‡§æ‡§§ ‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ',
      tips: [
        '‡§Ö‡§ï‡•á‡§≤‡•á ‡§¨‡§æ‡§π‡§∞ ‡§® ‡§®‡§ø‡§ï‡§≤‡•á‡§Ç',
        '‡§Ö‡§™‡§®‡§æ ‡§´‡•ã‡§® ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§∞‡§ñ‡•á‡§Ç',
        '‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§¨‡§§‡§æ‡§ï‡§∞ ‡§ú‡§æ‡§è‡§Ç',
        '‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∞‡•ã‡§∂‡§®‡•Ä ‡§µ‡§æ‡§≤‡•á ‡§∞‡§æ‡§∏‡•ç‡§§‡•á ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç',
      ],
    });
  }

  tips.push({
    title: '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ',
    tips: [
      'OTP ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∂‡•á‡§Ø‡§∞ ‡§® ‡§ï‡§∞‡•á‡§Ç',
      '‡§Ö‡§®‡§ú‡§æ‡§® ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§® ‡§ï‡§∞‡•á‡§Ç',
      '‡§´‡•á‡§ï ‡§ï‡•â‡§≤ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç',
      'UPI PIN ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡•á‡§Ç',
    ],
  });

  tips.push({
    title: '‡§ò‡§∞‡•á‡§≤‡•Ç ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ',
    tips: [
      '‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§®‡§Ç‡§¨‡§∞ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç',
      '‡§¶‡§∞‡§µ‡§æ‡§ú‡§æ ‡§ñ‡•ã‡§≤‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§¶‡•á‡§ñ ‡§≤‡•á‡§Ç',
      '‡§ó‡•à‡§∏ ‡§î‡§∞ ‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç',
      '‡§™‡§°‡§º‡•ã‡§∏‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§∞‡§ñ‡•á‡§Ç',
    ],
  });

  return tips;
}

// Achievement system for gamifying the learning experience
export const ACHIEVEMENT_TYPES = {
  STREAK: 'streak',
  COMPLETION: 'completion',
  INTERACTION: 'interaction',
  MILESTONE: 'milestone',
  SOCIAL: 'social',
  SPECIAL: 'special',
};

export const ACHIEVEMENTS = [
  // Streak achievements
  {
    id: 'first_call',
    title: 'рдкрд╣рд▓реА рдмрд╛рдд',
    description: 'рджреАрджреА рд╕реЗ рдкрд╣рд▓реА рдмрд╛рд░ рдмрд╛рдд рдХреА',
    icon: 'ЁЯОЙ',
    type: ACHIEVEMENT_TYPES.MILESTONE,
    rarity: 'common',
    condition: (stats) => stats.totalCalls >= 1,
  },
  {
    id: 'streak_3',
    title: '3 рджрд┐рди',
    description: '3 рджрд┐рди рд▓рдЧрд╛рддрд╛рд░ рд╕реАрдЦрд╛',
    icon: 'ЁЯФе',
    type: ACHIEVEMENT_TYPES.STREAK,
    rarity: 'common',
    condition: (stats) => stats.currentStreak >= 3,
  },
  {
    id: 'streak_7',
    title: 'рд╕рдкреНрддрд╛рд╣ рдЪреИрдВрдкрд┐рдпрди',
    description: '7 рджрд┐рди рд▓рдЧрд╛рддрд╛рд░ рд╕реАрдЦрд╛',
    icon: 'тнР',
    type: ACHIEVEMENT_TYPES.STREAK,
    rarity: 'rare',
    condition: (stats) => stats.currentStreak >= 7,
  },
  {
    id: 'streak_30',
    title: 'рдорд╣реАрдирд╛ рдорд╛рд╕реНрдЯрд░',
    description: '30 рджрд┐рди рд▓рдЧрд╛рддрд╛рд░ рд╕реАрдЦрд╛',
    icon: 'ЁЯСС',
    type: ACHIEVEMENT_TYPES.STREAK,
    rarity: 'legendary',
    condition: (stats) => stats.currentStreak >= 30,
  },

  // Completion achievements
  {
    id: 'health_complete',
    title: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЧреБрд░реБ',
    description: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреИрдХ рдкреВрд░рд╛ рдХрд┐рдпрд╛',
    icon: 'ЁЯПе',
    type: ACHIEVEMENT_TYPES.COMPLETION,
    rarity: 'rare',
    condition: (stats) => stats.packProgress?.health_hygiene >= 100,
  },
  {
    id: 'digital_complete',
    title: 'рдбрд┐рдЬрд┐рдЯрд▓ рд╕рдЦреА',
    description: 'рдбрд┐рдЬрд┐рдЯрд▓ рд╕рд╛рдереА рдкреИрдХ рдкреВрд░рд╛ рдХрд┐рдпрд╛',
    icon: 'ЁЯУ▒',
    type: ACHIEVEMENT_TYPES.COMPLETION,
    rarity: 'rare',
    condition: (stats) => stats.packProgress?.digital_saathi >= 100,
  },
  {
    id: 'rights_complete',
    title: 'рдЕрдзрд┐рдХрд╛рд░ рдпреЛрджреНрдзрд╛',
    description: 'рдЕрдзрд┐рдХрд╛рд░ рдФрд░ рд╕реБрд░рдХреНрд╖рд╛ рдкреИрдХ рдкреВрд░рд╛ рдХрд┐рдпрд╛',
    icon: 'тЪЦя╕П',
    type: ACHIEVEMENT_TYPES.COMPLETION,
    rarity: 'rare',
    condition: (stats) => stats.packProgress?.rights_safety >= 100,
  },
  {
    id: 'self_dev_complete',
    title: 'рдЖрддреНрдо рд╡рд┐рдХрд╛рд╕ рд╕реНрдЯрд╛рд░',
    description: 'рдЖрддреНрдо рд╡рд┐рдХрд╛рд╕ рдкреИрдХ рдкреВрд░рд╛ рдХрд┐рдпрд╛',
    icon: 'ЁЯМЯ',
    type: ACHIEVEMENT_TYPES.COMPLETION,
    rarity: 'rare',
    condition: (stats) => stats.packProgress?.self_dev >= 100,
  },

  // Interaction achievements
  {
    id: 'chatty',
    title: 'рдмрд╛рддреВрдиреА',
    description: '50 рдмрд╛рд░ рджреАрджреА рд╕реЗ рдмрд╛рдд рдХреА',
    icon: 'ЁЯТм',
    type: ACHIEVEMENT_TYPES.INTERACTION,
    rarity: 'common',
    condition: (stats) => stats.totalCalls >= 50,
  },
  {
    id: 'super_learner',
    title: 'рд╕реБрдкрд░ рд▓рд░реНрдирд░',
    description: '100 рдмрд╛рд░ рджреАрджреА рд╕реЗ рдмрд╛рдд рдХреА',
    icon: 'ЁЯЪА',
    type: ACHIEVEMENT_TYPES.INTERACTION,
    rarity: 'epic',
    condition: (stats) => stats.totalCalls >= 100,
  },

  // Milestone achievements
  {
    id: 'all_packs_complete',
    title: 'рд╕рд░реНрд╡рдЬреНрдЮ',
    description: 'рд╕рднреА рдкреИрдХ рдкреВрд░реЗ рдХрд┐рдП',
    icon: 'ЁЯОУ',
    type: ACHIEVEMENT_TYPES.MILESTONE,
    rarity: 'legendary',
    condition: (stats) => {
      const packs = ['health_hygiene', 'digital_saathi', 'rights_safety', 'self_dev'];
      return packs.every(pack => stats.packProgress?.[pack] >= 100);
    },
  },
  {
    id: 'early_bird',
    title: 'рд╕реБрдмрд╣ рдХреА рд░рд╛рдиреА',
    description: 'рд╕реБрдмрд╣ 8 рдмрдЬреЗ рд╕реЗ рдкрд╣рд▓реЗ 10 рдмрд╛рд░ рд╕реАрдЦрд╛',
    icon: 'ЁЯМЕ',
    type: ACHIEVEMENT_TYPES.SPECIAL,
    rarity: 'rare',
    condition: (stats) => stats.earlyMorningSessions >= 10,
  },
  {
    id: 'night_owl',
    title: 'рд░рд╛рдд рдХреА рдЪреИрдВрдкрд┐рдпрди',
    description: 'рд░рд╛рдд 10 рдмрдЬреЗ рдХреЗ рдмрд╛рдж 10 рдмрд╛рд░ рд╕реАрдЦрд╛',
    icon: 'ЁЯМЩ',
    type: ACHIEVEMENT_TYPES.SPECIAL,
    rarity: 'rare',
    condition: (stats) => stats.lateNightSessions >= 10,
  },

  // Social achievements (for future community features)
  {
    id: 'helper',
    title: 'рд╕рд╣рд╛рдпрдХ',
    description: '5 рд╕рд╣реЗрд▓рд┐рдпреЛрдВ рдХреА рдорджрдж рдХреА',
    icon: 'ЁЯдЭ',
    type: ACHIEVEMENT_TYPES.SOCIAL,
    rarity: 'epic',
    condition: (stats) => stats.helpedFriends >= 5,
  },
  {
    id: 'mentor',
    title: 'рдЧреБрд░реБ рдорд╛рддрд╛',
    description: '10 рдирдИ рд╕рд╣реЗрд▓рд┐рдпреЛрдВ рдХреЛ рдЬреЛрдбрд╝рд╛',
    icon: 'ЁЯСйтАНЁЯПл',
    type: ACHIEVEMENT_TYPES.SOCIAL,
    rarity: 'legendary',
    condition: (stats) => stats.referrals >= 10,
  },

  // Festival achievements
  {
    id: 'diwali_learner',
    title: 'рджрд┐рд╡рд╛рд▓реА рджреАрджреА',
    description: 'рджрд┐рд╡рд╛рд▓реА рдХреЗ рджрд┐рди рд╕реАрдЦрд╛',
    icon: 'ЁЯкФ',
    type: ACHIEVEMENT_TYPES.SPECIAL,
    rarity: 'rare',
    condition: (stats) => stats.festivalLearning?.diwali,
  },
  {
    id: 'womens_day',
    title: 'рдорд╣рд┐рд▓рд╛ рджрд┐рд╡рд╕ рд╕реНрдкреЗрд╢рд▓',
    description: 'рдорд╣рд┐рд▓рд╛ рджрд┐рд╡рд╕ рдкрд░ рд╕реАрдЦрд╛',
    icon: 'ЁЯСй',
    type: ACHIEVEMENT_TYPES.SPECIAL,
    rarity: 'epic',
    condition: (stats) => stats.festivalLearning?.womensDay,
  },
];

// Function to check and unlock achievements
export function checkAchievements(userStats, currentAchievements = []) {
  const newAchievements = [];
  
  ACHIEVEMENTS.forEach(achievement => {
    // Skip if already unlocked
    if (currentAchievements.includes(achievement.id)) {
      return;
    }
    
    // Check if condition is met
    if (achievement.condition(userStats)) {
      newAchievements.push(achievement.id);
    }
  });
  
  return newAchievements;
}

// Get achievement by ID
export function getAchievement(id) {
  return ACHIEVEMENTS.find(achievement => achievement.id === id);
}

// Get achievements by type
export function getAchievementsByType(type) {
  return ACHIEVEMENTS.filter(achievement => achievement.type === type);
}

// Calculate achievement progress
export function getAchievementProgress(achievement, userStats) {
  // This is a simplified version - in real implementation, 
  // you'd have more sophisticated progress tracking
  if (achievement.condition(userStats)) {
    return 100;
  }
  
  // Basic progress estimation for streak achievements
  if (achievement.type === ACHIEVEMENT_TYPES.STREAK) {
    const targetStreak = parseInt(achievement.id.split('_')[1]);
    return Math.min(100, (userStats.currentStreak / targetStreak) * 100);
  }
  
  // Basic progress for interaction achievements
  if (achievement.type === ACHIEVEMENT_TYPES.INTERACTION) {
    if (achievement.id === 'chatty') {
      return Math.min(100, (userStats.totalCalls / 50) * 100);
    }
    if (achievement.id === 'super_learner') {
      return Math.min(100, (userStats.totalCalls / 100) * 100);
    }
  }
  
  return 0;
}

// Motivational messages for achievements
export const ACHIEVEMENT_MESSAGES = {
  unlock: [
    'рд╡рд╛рд╣! рдЖрдкрдиреЗ рдПрдХ рдирдпрд╛ рдмреИрдЬ рдЕрдирд▓реЙрдХ рдХрд┐рдпрд╛! ЁЯОЙ',
    'рд╢рд╛рдмрд╛рд╢! рдпрд╣ рдЖрдкрдХреА рдореЗрд╣рдирдд рдХрд╛ рдлрд▓ рд╣реИ! тнР',
    'рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдк рдЖрдЧреЗ рдмрдврд╝ рд░рд╣реА рд╣реИрдВ! ЁЯЪА',
    'рдЕрджреНрднреБрдд! рдЖрдкрдХреА рд▓рдЧрди рджреЗрдЦрдХрд░ рдЦреБрд╢реА рд╣реБрдИ! ЁЯТЦ',
  ],
  progress: [
    'рдЖрдк рд╕рд╣реА рджрд┐рд╢рд╛ рдореЗрдВ рдЬрд╛ рд░рд╣реА рд╣реИрдВ! ЁЯСН',
    'рдереЛрдбрд╝рд╛ рдФрд░ рдореЗрд╣рдирдд, рдмреИрдЬ рдЖрдкрдХрд╛! ЁЯТк',
    'рдмрд╕ рдХреБрдЫ рдХрджрдо рдФрд░! ЁЯПГтАНтЩАя╕П',
    'рдЖрдк рдХрд░ рд╕рдХрддреА рд╣реИрдВ! ЁЯМЯ',
  ]
};

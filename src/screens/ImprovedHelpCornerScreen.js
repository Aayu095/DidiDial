import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Pressable,
  Modal,
  TextInput,
  Alert,
  Linking,
} from 'react-native';
import * as Animatable from 'react-native-animatable';
import * as Haptics from 'expo-haptics';
import { BlurView } from 'expo-blur';
import GradientBackground from '../components/GradientBackground';
import { COLORS, TYPOGRAPHY, SPACING, BORDER_RADIUS } from '../config/theme';

export default function ImprovedHelpCornerScreen({ navigation }) {
  const [selectedFAQ, setSelectedFAQ] = useState(null);
  const [showContactModal, setShowContactModal] = useState(false);
  const [contactType, setContactType] = useState('');
  const [feedbackText, setFeedbackText] = useState('');

  const helpSections = [
    {
      id: 'learning_help',
      title: '‡§∏‡•Ä‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•à?',
      subtitle: 'Learning difficulties?',
      icon: 'üìö',
      color: COLORS.primary[500],
      items: [
        {
          question: '‡§™‡§æ‡§† ‡§ï‡•à‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?',
          answer: '‡§π‡•ã‡§Æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞ "‡§™‡§æ‡§† ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç" ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§ ‡§´‡§ø‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡§®‡§™‡§∏‡§Ç‡§¶ ‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç ‡§î‡§∞ ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§'
        },
        {
          question: '‡§¶‡•Ä‡§¶‡•Ä ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?',
          answer: '‡§π‡•ã‡§Æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞ "‡§¶‡•Ä‡§¶‡•Ä ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç" ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§¶‡•Ä‡§¶‡•Ä ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§'
        },
        {
          question: '‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡•à‡§∏‡•á ‡§¶‡•á‡§ñ‡•á‡§Ç?',
          answer: '‡§Æ‡•á‡§®‡•ç‡§Ø‡•Ç ‡§Æ‡•á‡§Ç "‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø" ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç‡•§ ‡§µ‡§π‡§æ‡§Ç ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§™‡•Ç‡§∞‡•á ‡§ï‡§ø‡§è ‡§ó‡§è ‡§™‡§æ‡§† ‡§î‡§∞ ‡§¨‡•à‡§ú ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§'
        },
        {
          question: '‡§¨‡•à‡§ú ‡§ï‡•à‡§∏‡•á ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç?',
          answer: '‡§™‡§æ‡§† ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞‡§®‡•á, ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§î‡§∞ ‡§®‡§è ‡§µ‡§ø‡§∑‡§Ø ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§∏‡•á ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•à‡§ú ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§'
        }
      ]
    },
    {
      id: 'app_usage',
      title: '‡§ê‡§™ ‡§ï‡•à‡§∏‡•á ‡§ö‡§≤‡§æ‡§è‡§Ç?',
      subtitle: 'How to use app?',
      icon: 'üì±',
      color: COLORS.primary[500],
      items: [
        {
          question: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•Å‡§®‡§æ‡§à ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∞‡§π‡•Ä?',
          answer: '‡§´‡•ã‡§® ‡§ï‡§æ ‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§ï‡§∞ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§'
        },
        {
          question: '‡§Æ‡§æ‡§á‡§ï ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ?',
          answer: '‡§ê‡§™ ‡§ï‡•ã ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç‡•§ ‡§´‡•ã‡§® ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§ï‡§∞ DidiDial ‡§ê‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§æ‡§á‡§ï ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§'
        },
        {
          question: '‡§ê‡§™ ‡§ß‡•Ä‡§Æ‡§æ ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à?',
          answer: '‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ê‡§™ ‡§ï‡•ã ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§ï‡•á ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ñ‡•ã‡§≤‡•á‡§Ç‡•§'
        },
        {
          question: '‡§≠‡§æ‡§∑‡§æ ‡§ï‡•à‡§∏‡•á ‡§¨‡§¶‡§≤‡•á‡§Ç?',
          answer: '‡§Æ‡•á‡§®‡•ç‡§Ø‡•Ç ‡§Æ‡•á‡§Ç "‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤" ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§ï‡§∞ ‡§≠‡§æ‡§∑‡§æ ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§'
        }
      ]
    }
  ];

  const contactOptions = [
    {
      id: 'technical',
      title: '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
      subtitle: 'App ki problem',
      icon: 'üõ†Ô∏è',
      color: COLORS.status.error,
    },
    {
      id: 'feedback',
      title: '‡§´‡•Ä‡§°‡§¨‡•à‡§ï',
      subtitle: 'Your suggestions',
      icon: 'üí¨',
      color: COLORS.status.info,
    },
    {
      id: 'feature',
      title: '‡§®‡§à ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß',
      subtitle: 'Request new feature',
      icon: 'üåü',
      color: COLORS.status.success,
    }
  ];

  const quickTips = [
    {
      icon: 'üí°',
      title: '‡§ü‡§ø‡§™ 1',
      text: '‡§∞‡•ã‡§ú‡§º‡§æ‡§®‡§æ 10 ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç'
    },
    {
      icon: 'üéØ',
      title: '‡§ü‡§ø‡§™ 2', 
      text: '‡§™‡§π‡§≤‡•á ‡§Ü‡§∏‡§æ‡§® ‡§µ‡§ø‡§∑‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç, ‡§´‡§ø‡§∞ ‡§ï‡§†‡§ø‡§® ‡§ï‡•Ä ‡§§‡§∞‡§´ ‡§¨‡§¢‡§º‡•á‡§Ç'
    },
    {
      icon: 'üó£Ô∏è',
      title: '‡§ü‡§ø‡§™ 3',
      text: '‡§¶‡•Ä‡§¶‡•Ä ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§∏‡§æ‡§´‡§º ‡§î‡§∞ ‡§ß‡•Ä‡§∞‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç'
    }
  ];

  const handleFAQPress = (item) => {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setSelectedFAQ(selectedFAQ === item ? null : item);
  };

  const handleContactPress = (type) => {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    setContactType(type);
    setShowContactModal(true);
  };

  const handleSubmitFeedback = () => {
    if (!feedbackText.trim()) {
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§');
      return;
    }

    // In real app, send to backend
    Alert.alert(
      '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!',
      '‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§π‡§Æ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§Ü‡§™‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§',
      [{ text: '‡§†‡•Ä‡§ï ‡§π‡•à', onPress: () => {
        setShowContactModal(false);
        setFeedbackText('');
        setContactType('');
      }}]
    );
  };

  const renderHelpSection = (section) => (
    <Animatable.View
      key={section.id}
      animation="fadeInUp"
      delay={200}
      style={styles.helpSection}
    >
      <View style={[styles.sectionHeader, { backgroundColor: section.color }]}>
        <Text style={styles.sectionIcon}>{section.icon}</Text>
        <View style={styles.sectionTitleContainer}>
          <Text style={styles.sectionTitle}>{section.title}</Text>
          <Text style={styles.sectionSubtitle}>{section.subtitle}</Text>
        </View>
      </View>

      <View style={styles.faqContainer}>
        {section.items.map((item, index) => (
          <View key={index} style={styles.faqItem}>
            <Pressable
              onPress={() => handleFAQPress(item)}
              style={[
                styles.faqQuestion,
                selectedFAQ === item && styles.faqQuestionActive
              ]}
            >
              <Text style={styles.faqQuestionText}>{item.question}</Text>
              <Text style={[
                styles.faqArrow,
                selectedFAQ === item && styles.faqArrowActive
              ]}>
                {selectedFAQ === item ? '‚àí' : '+'}
              </Text>
            </Pressable>
            
            {selectedFAQ === item && (
              <Animatable.View
                animation="fadeInDown"
                duration={300}
                style={styles.faqAnswer}
              >
                <Text style={styles.faqAnswerText}>{item.answer}</Text>
              </Animatable.View>
            )}
          </View>
        ))}
      </View>
    </Animatable.View>
  );

  return (
    <GradientBackground colors={[COLORS.background.primary, COLORS.background.surface]}>
      <ScrollView 
        style={styles.container} 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Header */}
        <Animatable.View animation="fadeInDown" style={styles.header}>
          <Text style={styles.headerTitle}>‡§Æ‡§¶‡§¶ ‡§ï‡•â‡§∞‡•ç‡§®‡§∞</Text>
          <Text style={styles.headerSubtitle}>Help & Support</Text>
          <Text style={styles.headerDescription}>
            ‡§¶‡•Ä‡§¶‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§π‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§≤‡•á‡§ï‡§∞ ‡§Ü‡§à ‡§π‡•à
          </Text>
        </Animatable.View>

        {/* Quick Tips */}
        <Animatable.View animation="fadeInUp" delay={100} style={styles.tipsSection}>
          <Text style={styles.tipsTitle}>üí° ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§ü‡§ø‡§™‡•ç‡§∏</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            {quickTips.map((tip, index) => (
              <Animatable.View
                key={index}
                animation="fadeInRight"
                delay={index * 100}
                style={styles.tipCard}
              >
                <Text style={styles.tipIcon}>{tip.icon}</Text>
                <Text style={styles.tipTitle}>{tip.title}</Text>
                <Text style={styles.tipText}>{tip.text}</Text>
              </Animatable.View>
            ))}
          </ScrollView>
        </Animatable.View>

        {/* Help Sections */}
        {helpSections.map(renderHelpSection)}

        {/* Contact Section */}
        <Animatable.View animation="fadeInUp" delay={400} style={styles.contactSection}>
          <Text style={styles.contactTitle}>‡§π‡§Æ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç</Text>
          <Text style={styles.contactSubtitle}>
            ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à? ‡§π‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç
          </Text>
          
          <View style={styles.contactOptions}>
            {contactOptions.map((option, index) => (
              <Animatable.View
                key={option.id}
                animation="fadeInUp"
                delay={index * 100}
              >
                <Pressable
                  onPress={() => handleContactPress(option.id)}
                  style={[styles.contactOption, { borderColor: option.color }]}
                >
                  <View style={[styles.contactIcon, { backgroundColor: option.color }]}>
                    <Text style={styles.contactIconText}>{option.icon}</Text>
                  </View>
                  <View style={styles.contactContent}>
                    <Text style={styles.contactOptionTitle}>{option.title}</Text>
                    <Text style={styles.contactOptionSubtitle}>{option.subtitle}</Text>
                  </View>
                  <Text style={styles.contactArrow}>‚Ä∫</Text>
                </Pressable>
              </Animatable.View>
            ))}
          </View>
        </Animatable.View>

        {/* Emergency Contact */}
        <Animatable.View animation="fadeInUp" delay={500} style={styles.emergencySection}>
          <Text style={styles.emergencyTitle}>üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ</Text>
          <Text style={styles.emergencyText}>
            ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è? ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§® ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
          </Text>
          <Pressable
            onPress={() => Linking.openURL('tel:1800-123-4567')}
            style={styles.emergencyButton}
          >
            <Text style={styles.emergencyButtonText}>üìû 1800-123-4567</Text>
          </Pressable>
        </Animatable.View>
      </ScrollView>

      {/* Contact Modal */}
      <Modal
        visible={showContactModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowContactModal(false)}
      >
        <BlurView intensity={80} style={styles.modalOverlay}>
          <Animatable.View animation="slideInUp" style={styles.contactModal}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {contactOptions.find(o => o.id === contactType)?.title}
              </Text>
              <Pressable
                onPress={() => setShowContactModal(false)}
                style={styles.modalCloseButton}
              >
                <Text style={styles.modalCloseText}>‚úï</Text>
              </Pressable>
            </View>

            <View style={styles.modalContent}>
              <Text style={styles.modalLabel}>‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç:</Text>
              <TextInput
                style={styles.modalTextInput}
                placeholder="‡§Ø‡§π‡§æ‡§Ç ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ø‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≤‡§ø‡§ñ‡•á‡§Ç..."
                value={feedbackText}
                onChangeText={setFeedbackText}
                multiline
                numberOfLines={6}
                textAlignVertical="top"
              />

              <View style={styles.modalButtons}>
                <Pressable
                  onPress={() => setShowContactModal(false)}
                  style={[styles.modalButton, styles.modalCancelButton]}
                >
                  <Text style={styles.modalCancelText}>‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç</Text>
                </Pressable>
                <Pressable
                  onPress={handleSubmitFeedback}
                  style={[styles.modalButton, styles.modalSubmitButton]}
                >
                  <Text style={styles.modalSubmitText}>‡§≠‡•á‡§ú‡•á‡§Ç</Text>
                </Pressable>
              </View>
            </View>
          </Animatable.View>
        </BlurView>
      </Modal>
    </GradientBackground>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollContent: {
    padding: SPACING.lg,
    paddingBottom: SPACING['2xl'],
  },
  header: {
    alignItems: 'center',
    marginTop: SPACING.sm,
    marginBottom: SPACING.lg,
  },
  headerTitle: {
    fontSize: TYPOGRAPHY.fontSize['2xl'],
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: COLORS.text.primary,
    marginBottom: SPACING.xs,
  },
  headerSubtitle: {
    fontSize: TYPOGRAPHY.fontSize.base,
    color: COLORS.text.secondary,
    marginBottom: SPACING.sm,
  },
  headerDescription: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    color: COLORS.primary[600],
    textAlign: 'center',
    fontStyle: 'italic',
  },
  tipsSection: {
    marginBottom: SPACING.lg,
  },
  tipsTitle: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: COLORS.text.primary,
    marginBottom: SPACING.md,
  },
  tipCard: {
    width: 180,
    backgroundColor: COLORS.background.card,
    borderRadius: BORDER_RADIUS.lg,
    padding: SPACING.md,
    marginRight: SPACING.md,
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  tipIcon: {
    fontSize: 20,
    marginBottom: SPACING.sm,
  },
  tipTitle: {
    fontSize: TYPOGRAPHY.fontSize.base,
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: COLORS.text.primary,
    marginBottom: SPACING.xs,
  },
  tipText: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    color: COLORS.text.secondary,
    lineHeight: 18,
  },
  helpSection: {
    marginBottom: SPACING.lg,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    marginBottom: SPACING.sm,
  },
  sectionIcon: {
    fontSize: 24,
    marginRight: SPACING.sm,
  },
  sectionTitleContainer: {
    flex: 1,
  },
  sectionTitle: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: '#fff',
    marginBottom: 2,
  },
  sectionSubtitle: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    color: 'rgba(255, 255, 255, 0.8)',
  },
  faqContainer: {
    backgroundColor: COLORS.background.card,
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  faqItem: {
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  faqQuestion: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: SPACING.md,
  },
  faqQuestionActive: {
    backgroundColor: COLORS.primary[50],
  },
  faqQuestionText: {
    flex: 1,
    fontSize: TYPOGRAPHY.fontSize.base,
    fontWeight: TYPOGRAPHY.fontWeight.semibold,
    color: COLORS.text.primary,
  },
  faqArrow: {
    fontSize: 18,
    color: COLORS.text.secondary,
    marginLeft: SPACING.sm,
  },
  faqArrowActive: {
    color: COLORS.primary[600],
  },
  faqAnswer: {
    padding: SPACING.md,
    paddingTop: 0,
    backgroundColor: COLORS.primary[25],
  },
  faqAnswerText: {
    fontSize: TYPOGRAPHY.fontSize.base,
    color: COLORS.text.primary,
    lineHeight: 22,
  },
  contactSection: {
    marginBottom: SPACING.lg,
  },
  contactTitle: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: COLORS.text.primary,
    marginBottom: SPACING.xs,
  },
  contactSubtitle: {
    fontSize: TYPOGRAPHY.fontSize.base,
    color: COLORS.text.secondary,
    marginBottom: SPACING.md,
  },
  contactOptions: {
    gap: SPACING.sm,
  },
  contactOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.background.card,
    borderRadius: BORDER_RADIUS.lg,
    padding: SPACING.md,
    borderWidth: 2,
  },
  contactIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: SPACING.sm,
  },
  contactIconText: {
    fontSize: 18,
  },
  contactContent: {
    flex: 1,
  },
  contactOptionTitle: {
    fontSize: TYPOGRAPHY.fontSize.base,
    fontWeight: TYPOGRAPHY.fontWeight.semibold,
    color: COLORS.text.primary,
    marginBottom: 2,
  },
  contactOptionSubtitle: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    color: COLORS.text.secondary,
  },
  contactArrow: {
    fontSize: 18,
    color: COLORS.text.secondary,
  },
  emergencySection: {
    backgroundColor: COLORS.status.error + '20',
    borderRadius: BORDER_RADIUS.lg,
    padding: SPACING.md,
    alignItems: 'center',
    marginBottom: SPACING.lg,
    borderWidth: 1,
    borderColor: COLORS.status.error + '40',
  },
  emergencyTitle: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: COLORS.status.error,
    marginBottom: SPACING.sm,
  },
  emergencyText: {
    fontSize: TYPOGRAPHY.fontSize.base,
    color: COLORS.text.primary,
    textAlign: 'center',
    marginBottom: SPACING.md,
  },
  emergencyButton: {
    backgroundColor: COLORS.status.error,
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.lg,
    borderRadius: BORDER_RADIUS.full,
  },
  emergencyButtonText: {
    fontSize: TYPOGRAPHY.fontSize.base,
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: '#fff',
  },
  modalOverlay: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  contactModal: {
    backgroundColor: '#fff',
    borderTopLeftRadius: BORDER_RADIUS.xl,
    borderTopRightRadius: BORDER_RADIUS.xl,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: SPACING.lg,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  modalTitle: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: TYPOGRAPHY.fontWeight.bold,
    color: COLORS.text.primary,
  },
  modalCloseButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: COLORS.neutral.gray[200],
    alignItems: 'center',
    justifyContent: 'center',
  },
  modalCloseText: {
    fontSize: 16,
    color: COLORS.text.primary,
  },
  modalContent: {
    padding: SPACING.lg,
  },
  modalLabel: {
    fontSize: TYPOGRAPHY.fontSize.base,
    fontWeight: TYPOGRAPHY.fontWeight.semibold,
    color: COLORS.text.primary,
    marginBottom: SPACING.sm,
  },
  modalTextInput: {
    backgroundColor: COLORS.background.surface,
    borderRadius: BORDER_RADIUS.md,
    padding: SPACING.md,
    fontSize: TYPOGRAPHY.fontSize.base,
    color: COLORS.text.primary,
    borderWidth: 1,
    borderColor: COLORS.border,
    minHeight: 120,
    marginBottom: SPACING.lg,
  },
  modalButtons: {
    flexDirection: 'row',
    gap: SPACING.md,
  },
  modalButton: {
    flex: 1,
    paddingVertical: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    alignItems: 'center',
  },
  modalCancelButton: {
    backgroundColor: COLORS.neutral.gray[200],
  },
  modalSubmitButton: {
    backgroundColor: COLORS.primary[500],
  },
  modalCancelText: {
    fontSize: TYPOGRAPHY.fontSize.base,
    fontWeight: TYPOGRAPHY.fontWeight.semibold,
    color: COLORS.text.primary,
  },
  modalSubmitText: {
    fontSize: TYPOGRAPHY.fontSize.base,
    fontWeight: TYPOGRAPHY.fontWeight.semibold,
    color: '#fff',
  },
});